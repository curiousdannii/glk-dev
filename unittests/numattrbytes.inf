Constant Story "NumAttrBytes";
Constant Headline "Not a game.^";

Release 2;

! This is a compiler unit test, testing Glulx code generation when the
! NUM_ATTR_BYTES option is raised from the default value (7).
!
! Given a newer I6 compiler, this test should compile and pass with
! $NUM_ATTR_BYTES=11, $NUM_ATTR_BYTES=15, etc. (The value has to be
! 4n+3.) And also with the default value, of course. In all cases it
! should work with both -S and -~S mode.

Global gg_mainwin;

Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters

Global failures;

Attribute attr0;

[ Main loc;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;

	Banner();
	new_line;
	RunTest();
];

[ Banner  i ix;
    if (Story ~= 0) {
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 i;
    print i;
    print " / Serial number ";
    for (i=0 : i<6 : i++) print (char) ROM_GAMESERIAL->i;
    print " / Inform v"; inversion;
    print ", compiler options ";
    i = false;
    #Ifdef STRICT_MODE;
    print "S"; i++;
    #Endif; ! STRICT_MODE
    #Ifdef INFIX;
    print "X"; i++;
    #Ifnot;
    #Ifdef DEBUG;
    print "D"; i++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~i) print "(none)";
    new_line;

    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
];

[ check val wanted;
	if (val == wanted) {
		print val;
		rtrue;
	}
	failures++;
	print val, " (should be ", wanted, " FAIL)";
	rfalse;
];

[ checkobj val wanted;
	if (val == wanted) {
		print (object) val;
		rtrue;
	}
	failures++;
	print (object) val, " (should be ", (object) wanted, " FAIL)";
	rfalse;
];

[ checkdictword val wanted;
	if (val == wanted) {
		print "'", (address) val, "'";
		rtrue;
	}
	failures++;
	print "'", (address) val, "'", " (should be '", (address) wanted, "' FAIL)";
	rfalse;
];

[ string_to_array val arr arrlen    str oldstr len;
	oldstr = glk($0048); ! stream_get_current
	str = glk($0043, arr, arrlen, 1, 0); ! stream_open_memory
	if (str == 0) return 0;

	glk($0047, str); ! stream_set_current

	if (val->0 == $c0 or $c1)
		val();
	else
		@streamstr val;

	glk($0047, oldstr); ! stream_set_current
	@copy $ffffffff sp;
	@copy str sp;
	@glk $0044 2 0; ! stream_close
	@copy sp len;
	@copy sp 0;

	return len;
];

Constant BIGBUFSIZE 256;
Array bigbuffer -> BIGBUFSIZE;
Array bigbuffer2 -> BIGBUFSIZE;

[ check_str str len  newlen ix good ch;
	good = true;
	newlen = string_to_array(str, bigbuffer2, BIGBUFSIZE);
	if (newlen ~= len) {
		good = false;
	}
	else {
		for (ix=0 : ix<len : ix++) {
			if (bigbuffer->ix ~= bigbuffer2->ix)
				good = false;
		}
	}
	print "~";
	for (ix=0 : ix<len : ix++) {
		ch = bigbuffer->ix;
		@streamchar ch;
	}
	print "~ len ", len;
	if (~~good) {
		failures++;
		print " (should be ~";
		for (ix=0 : ix<newlen : ix++) {
			ch = bigbuffer2->ix;
			@streamchar ch;
		}
		print "~ len ", newlen, ", FAIL)";
	}
];

Object obj0 "Obj-0"
  with name 'prop0';

Object -> obj1 "Obj-1"
  with name 'prop1';

Object -> -> obj2 "Obj-2"
  with name 'prop2';

Object -> obj3 "Obj-3"
  with name 'prop3';

[ RunTest val lastattr count len;
	failures = 0;
	
	print "NUM_ATTR_BYTES is ", NUM_ATTR_BYTES, "^";
	#ifdef GOBJ_EXT_START;
	print "GOBJ_EXT_START is ", GOBJ_EXT_START, "^";
	#endif;
	#ifdef GOBJ_TOTAL_LENGTH;
	print "GOBJ_TOTAL_LENGTH is ", GOBJ_TOTAL_LENGTH, "^";
	#endif;
	new_line;
	
	CheckBasicSetup();

	print "* General manipulation:^";
	
	remove obj2;
	val = (obj1 in obj2);
	print "obj1 in obj2: "; check(val, false); new_line;
	val = (obj2 in obj1);
	print "obj2 in obj1: "; check(val, false); new_line;
	val = parent(obj2);
	print "parent(obj2): "; check(val, 0); new_line;
	move obj2 to obj1;

	remove obj3;
	val = children(obj0);
	print "children(obj0): "; check(val, 1); new_line;
	remove obj1;
	val = children(obj0);
	print "children(obj0): "; check(val, 0); new_line;
	move obj3 to obj0;
	move obj1 to obj0;
	
	CheckBasicSetup();

	print "* Attribute setting:^";

	give obj1 attr0;
	give obj3 attr0;
	if (NUM_ATTR_BYTES >= 11) {
		give obj0 70;
		give obj1 70;
		give obj2 70;
	}
	lastattr = (NUM_ATTR_BYTES*8) - 1;
	give obj0 lastattr;
	give obj1 lastattr;
	give obj2 lastattr;
	give obj3 lastattr;

	count = 0;
	print "Objectloop: objects has attr0:";
	objectloop (val has attr0) {
		print " ", (object) val;
		count++;
	}
	new_line;
	print "Total "; check(count, 2); new_line;
	
	count = 0;
	print "Objectloop: objects has attr", lastattr, ":";
	objectloop (val has lastattr) {
		print " ", (object) val;
		count++;
	}
	new_line;
	print "Total "; check(count, 4); new_line;
	
	CheckBasicSetup();

	print "Class: ";
	len = string_to_array(print_obj_class, bigbuffer, BIGBUFSIZE);
	check_str("Class", len); new_line;
	print "obj0: ";
	len = string_to_array(print_obj_0, bigbuffer, BIGBUFSIZE);
	check_str("Obj-0", len); new_line;
	print "obj3: ";
	len = string_to_array(print_obj_3, bigbuffer, BIGBUFSIZE);
	check_str("Obj-3", len); new_line;
	print "obj1 name: ";
	len = string_to_array(print_name_1, bigbuffer, BIGBUFSIZE);
	check_str("Obj-1", len); new_line;
	print "obj2 name: ";
	len = string_to_array(print_name_2, bigbuffer, BIGBUFSIZE);
	check_str("Obj-2", len); new_line;

	new_line;
	if (failures == 0) {
		print "All tests passed.^";
	}
	else {
		print failures, " tests failed!^";
	}
];

[ print_obj_class;
	print (object) Class;
];

[ print_obj_0;
	print (object) obj0;
];

[ print_obj_3;
	print (object) obj3;
];

[ print_name_1;
	print (name) obj1;
];

[ print_name_2;
	print (name) obj2;
];

[ CheckBasicSetup val count;
	print "* CheckBasicSetup:^";

	print "obj1: ", (object) obj1, " ";
	checkdictword(obj1.name, 'prop1');
	new_line;
	
	val = parent(obj1);
	print "parent(obj1): ";
	checkobj(val, obj0);
	print " ";
	checkdictword(val.name, 'prop0');
	new_line;
	
	val = sibling(obj1);
	print "sibling(obj1): ";
	checkobj(val, obj3);
	print " ";
	checkdictword(val.name, 'prop3');
	new_line;
	
	val = child(obj1);
	print "child(obj1): ";
	checkobj(val, obj2);
	print " ";
	checkdictword(val.name, 'prop2');
	new_line;

	val = parent(obj2);
	print "parent(obj2): ";
	checkobj(val, obj1);
	print " ";
	checkdictword(val.name, 'prop1');
	new_line;
	
	val = youngest(obj0);
	print "youngest(obj0): ";
	checkobj(val, obj3);
	print " ";
	checkdictword(val.name, 'prop3');
	new_line;
	
	val = elder(obj3);
	print "elder(obj3): ";
	checkobj(val, obj1);
	print " ";
	checkdictword(val.name, 'prop1');
	new_line;
	
	val = (obj1 in obj0);
	print "obj1 in obj0: "; check(val, true); new_line;
	val = (obj1 in obj2);
	print "obj1 in obj2: "; check(val, false); new_line;
	val = (obj2 in obj1);
	print "obj2 in obj1: "; check(val, true); new_line;
	
	val = children(obj0);
	print "children(obj0): "; check(val, 2); new_line;
	val = children(obj1);
	print "children(obj1): "; check(val, 1); new_line;

	count = 0;
	print "Objectloop: all objects:";
	objectloop (val) {
		print " ", (object) val;
		count++;
	}
	new_line;
	print "Total "; check(count, 8); new_line;

	count = 0;
	print "Objectloop: objects in obj0:";
	objectloop (val in obj0) {
		print " ", (object) val;
		count++;
	}
	new_line;
	print "Total "; check(count, 2); new_line;

	count = 0;
	print "Objectloop: objects ofclass Object:";
	objectloop (val ofclass Object) {
		print " ", (object) val;
		count++;
	}
	new_line;
	print "Total "; check(count, 4); new_line;

	count = 0;
	print "Objectloop: objects ofclass Class:";
	objectloop (val ofclass Class) {
		print " ", (object) val;
		count++;
	}
	new_line;
	print "Total "; check(count, 4); new_line;

];
