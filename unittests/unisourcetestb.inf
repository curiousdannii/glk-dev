Constant Story "UniSourceTest";
Constant Headline "Not a game.^";

! This tests the Unicode source option (~-Cu~). With that flag, it should
! compile and display its output text correctly on both Zcode and Glulx.
!
! This does not check its output or report failure; you have to check it
! by eye. For a self-test, see unisourcetest.inf.

Release 1;

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX


[ Main;
  #ifdef TARGET_GLULX;
  @setiosys 2 0; ! select Glk I/O system
  mainwin = glk($0023, 0, 0, 0, 3, 0); ! glk_window_open
  glk($002F, mainwin); ! glk_set_window
  #endif; ! TARGET_GLULX
  
  new_line;
  Banner();
  new_line;

  print "NOTE: This test will only work right if compiled with the new ~inform -Cu~ switch.^^";

  run_tests();
];

[ Banner  i ix;
   if (Story ~= 0) {
    #ifdef TARGET_ZCODE;
    #ifV5; style bold; #Endif;
    print (string) Story;
    #ifV5; style roman; #Endif;
    #ifnot; ! TARGET_GLULX;
    glk($0086, 3); ! set header style
    print (string) Story;
    glk($0086, 0); ! set normal style
    #Endif; ! TARGET_
  }
  if (Headline ~= 0) print ": ", (string) Headline;
  #ifdef TARGET_ZCODE;
  print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
  for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
  #ifnot; ! TARGET_GLULX;
  print "Release ";
  @aloads ROM_GAMERELEASE 0 i;
  print i;
  print " / Serial number ";
  for (i=0 : i<6 : i++) print (char) ROM_GAMESERIAL->i;
  #Endif; ! TARGET_
  print " / Inform v"; inversion;
  print ", compiler options ";
  i = false;
  #Ifdef STRICT_MODE;
  print "S"; i++;
  #Endif; ! STRICT_MODE
  #Ifdef INFIX;
  print "X"; i++;
  #Ifnot;
  #Ifdef DEBUG;
  print "D"; i++;
  #Endif; ! DEBUG
  #Endif; ! INFIX
  if (~~i) print "(none)";
  new_line;

  #ifdef TARGET_GLULX;
  @gestalt 1 0 ix;
  print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
  ".", ix & $FF, " / ";
  @gestalt 0 0 ix;
  print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
  ix = HDR_GLULXVERSION-->0;
  print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
  #Endif; ! TARGET_GLULX
];

[ run_tests ix;
  print "* Each of the following lines should appear twice, identically:^^";
  
  for (ix=0 : string_literals-->ix : ix=ix+2) {
    print (string) string_literals-->ix, "^";
    print (string) string_literals-->(ix+1), "^";
  }

  for (ix=0 : dict_literals-->ix : ix=ix+2) {
    print (address) dict_literals-->ix, "^";
    print (address) dict_literals-->(ix+1), "^";
  }
];


#ifdef TARGET_ZCODE;
Zcharacter table + '@{14B}';
Zcharacter table + '@{3B1}';
Zcharacter table + '@{3B2}';
Zcharacter table + '@{3B3}';
Zcharacter table + '@{3B4}';
Zcharacter table + '@{3B5}';
Zcharacter table + '@{5D0}';
Zcharacter table + '@{5D1}';
Zcharacter table + '@{5D2}';
Zcharacter table + '@{5D3}';
Zcharacter table + '@{5DE}';
Zcharacter table + '@{2018}';
Zcharacter table + '@{2019}';
Zcharacter table + '@{201C}';
Zcharacter table + '@{201D}';
Zcharacter table + '@{304A}';
Zcharacter table + '@{3059}';
Zcharacter table + '@{3082}';
Zcharacter table + '@{30AA}';
Zcharacter table + '@{30B9}';
Zcharacter table + '@{30E2}';
Zcharacter table + '@{FB00}';
Zcharacter table + '@{FB01}';
Zcharacter table + '@{FB03}';
Zcharacter table + '@{FB04}';

#Endif; ! TARGET_ZCODE


Array string_literals -->
    "Simple ASCII"
    "Simple ASCII"
    "AEIOU with umlauts: äëïöü ÄËÏÖÜ"
    "AEIOU with umlauts: @:a@:e@:i@:o@:u @:A@:E@:I@:O@:U"
    "Greek: αβγδε (abgde)"
    "Greek: @{3B1}@{3B2}@{3B3}@{3B4}@{3B5} (abgde)"
    "Hebrew: אבגדמ (abgdm)"
    "Hebrew: @{5D0}@{5D1}@{5D2}@{5D3}@{5DE} (abgdm)"
    "Punctuation: ‘single curly quotes’ “double curly quotes”"
    "Punctuation: @{2018}single curly quotes@{2019} @{201C}double curly quotes@{201D}"
    "Ligatures: æ (ae) œ (oe) ŋ (nj) ﬀ (ff) ﬁ (fi) ﬃ (ffi) ﬄ (ffl)"
    "Ligatures: @{E6} (ae) @{153} (oe) @{14B} (nj) @{FB00} (ff) @{FB01} (fi) @{FB03} (ffi) @{FB04} (ffl)"
    "Hirigana: おすも (O SU MO)"
    "Hirigana: @{304A}@{3059}@{3082} (O SU MO)"
    "Katakana: オスモ (O SU MO)"
    "Katakana: @{30AA}@{30B9}@{30E2} (O SU MO)"
    0 0;

Array dict_literals -->
    'ascii'
    'ascii'
    'hwæt'
    'hw@{E6}t'
    0 0;
