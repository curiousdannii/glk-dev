Constant Story "GraphWinTest";
Constant Headline "^Not a game.^";
Release 2;

Constant GG_GRAPHWIN_ROCK 210;
Global gg_graphwin = 0;

Global winsplit = 0;

Replace Tokenise__;

Include "Parser";
Include "VerbLib";

[ Initialise;
	if (~~graphics_supported()) {
		print "This interpreter does not support graphics!^^";
	}
	else {
		winsplit = 200;
		SetUpGraphWin();
	}

	location = Kitchen;
	selfobj.description = "You're some kind of person.";
];

[ SetUpGraphWin   method size;
	if (~~graphics_supported()) {
		winsplit = 0;
		return;
	}

	if (winsplit == 0) {
		if (gg_graphwin) {
			glk_window_close(gg_graphwin, 0);
			gg_graphwin = 0;
		}
	}
	else {
		if (~~gg_graphwin) {
			! Open a graphics window.
			if (winsplit > 0) {
				method = $12;
				size = winsplit;
			}
			else {
				method = $22;
				size = -winsplit;
			}
			gg_graphwin = glk_window_open(gg_mainwin, method, size, 5, 
				GG_GRAPHWIN_ROCK); ! window_open
			if (~~gg_graphwin) {
				print "Your interpreter was unable to create a graphics
					window, even though it said it could.^^";
				winsplit = 0;
			}
			else {
				glk_request_mouse_event(gg_graphwin);
			}
		}
	}
];

[ IdentifyGlkObject phase type ref rock;
	if (phase == 0) {
		! Zero out references to our objects.
		gg_graphwin = 0;
		return;
	}

	if (phase == 1) {
		switch (type) {
			0: ! it's a window
				switch (rock) {
					GG_GRAPHWIN_ROCK: gg_graphwin = ref;
				}
			1: ! it's a stream
				! But we don't create any.
			2: ! it's a fileref
				! But we don't create any.
		}
		return;
	}

	if (phase == 2) {
		! Now that we know whether the graphics window exists, we have to 
		! turn it on or off, depending on whether it *should* exist or not.
		SetUpGraphWin();
		return;
	}
];

[ HandleGlkEvent ev context xpos ypos;
	context = 0; ! suppress ignored warning
	switch (ev-->0) {
	  4: ! evtype_MouseInput
		xpos = ev-->2;
		ypos = ev-->3;
		glk_cancel_line_event(gg_mainwin, gg_event);
		print "Mouse event at ", xpos, ", ", ypos, "!^>";
		glk_request_line_event(gg_mainwin, buffer+WORDSIZE, INPUT_BUFFER_LEN-WORDSIZE, gg_event-->2);
		glk_request_mouse_event(gg_graphwin);
	  5: ! evtype_Arrange
		glk_cancel_line_event(gg_mainwin, gg_event);
		print "Window arrangement event!^>";
		glk_request_line_event(gg_mainwin, buffer+WORDSIZE, INPUT_BUFFER_LEN-WORDSIZE, gg_event-->2);
	  6: ! evtype_Redraw
		glk_cancel_line_event(gg_mainwin, gg_event);
		print "Graphics window redraw event!^>";
		glk_request_line_event(gg_mainwin, buffer+WORDSIZE, INPUT_BUFFER_LEN-WORDSIZE, gg_event-->2);
	}
];

[ Tokenise__ buf tab
    cx numwords len bx ix wx wpos wlen val res dictlen entrylen;
    len = buf-->0;
    buf = buf+WORDSIZE;

    ! First, split the buffer up into words. We split on period and
	! double-quote, but not comma.

    cx = 0;
    numwords = 0;
    while (cx < len) {
        while (cx < len && buf->cx == ' ') cx++;
        if (cx >= len) break;
        bx = cx;
        if (buf->cx == '.' or ',' or '"') cx++;
        else {
            while (cx < len && buf->cx ~= ' ' or '.' or '"') cx++;
        }
        tab-->(numwords*3+2) = (cx-bx);
        tab-->(numwords*3+3) = WORDSIZE+bx;
        numwords++;
        if (numwords >= MAX_BUFFER_WORDS) break;
    }
    tab-->0 = numwords;

    ! Now we look each word up in the dictionary.

    dictlen = #dictionary_table-->0;
    entrylen = DICT_WORD_SIZE + 7;

    for (wx=0 : wx<numwords : wx++) {
        wlen = tab-->(wx*3+2);
        wpos = tab-->(wx*3+3);

        ! Copy the word into the gg_tokenbuf array, clipping to DICT_WORD_SIZE
        ! characters and lower case.
        if (wlen > DICT_WORD_SIZE) wlen = DICT_WORD_SIZE;
        cx = wpos - WORDSIZE;
        for (ix=0 : ix<wlen : ix++) gg_tokenbuf->ix = glk($00A0, buf->(cx+ix));
        for (: ix<DICT_WORD_SIZE : ix++) gg_tokenbuf->ix = 0;

        val = #dictionary_table + WORDSIZE;
        @binarysearch gg_tokenbuf DICT_WORD_SIZE val entrylen dictlen 1 1 res;
        tab-->(wx*3+1) = res;
    }
];

Object Kitchen "Image Room"
  with
	description [;
		print "A voice booooms out:
			Try ~split NUMBER fixed~ or ~split NUMBER percent~ to adjust
			the graphics window height. Type ~show~ to show the current
			height, or ~close~ to close the graphics window entirely.^^
			Type ~color COLOR~ to set the default color;
			~fill COLOR X,Y WxH~ to fill a rectangle;
			~erase X,Y WxH~ to erase a rectangle to the default color.
			(No space after the comma.)
			~clear~ will erase the entire graphics window.^^
			Type ~image~, or ~image NUMBER~,
			or ~image NUMBER X,Y~ to display an image.
			Adding a ~WxH~ term will scale the image to those
			dimensions.^^
			You can also type ~size NUMBER~ to check an image size.
			Images that should be available (imported from Sensory Jam):
			0, 1, 2, 5, 10, 11.^";
	],
  has light;

Include "Grammar";

Global parsed_dimensions;
Global parsed_position;

[ TryColor wordnum   addr len ix val ch digits;
	addr = WordAddress(wordnum);
	len = WordLength(wordnum);
	
	val = 0;
	digits = 0;
	for (ix=0 : ix<len : ix++) {
		ch = addr->ix;
		if (ch == '#' or '$')
			continue;
		if (ch >= '0' && ch <= '9') {
			val = 16*val + (ch-'0');
			digits++;
			continue;
		}
		if (ch >= 'a' && ch <= 'f') {
			val = 16*val + (ch-'a'+10);
			digits++;
			continue;
		}
		if (ch >= 'A' && ch <= 'F') {
			val = 16*val + (ch-'A'+10);
			digits++;
			continue;
		}
		return -1;
	}

	! Special case -- accept "F80" as "FF8800".
	if (digits == 3) {
		val = ((val & $F00) * 256) | ((val & $0F0) * 16) | (val & $00F);
		val = val + (val * 16);
	}

	return val;
];

Array colornames -->
	'red' $FF0000 'green' $00FF00 'blue' $0000FF
	'yellow' $FFFF00 'orange' $FF8000 'purple' $FF00FF
	'black' $000000 'white' $FFFFFF
	0 0;

[ TryDimensions wordnum   ix addr len ch xcount val res;
	addr = WordAddress(wordnum);
	len = WordLength(wordnum);

	res = 0;
	xcount = 0;
	val = 0;
	for (ix=0 : ix<len : ix++) {
		ch = addr->ix;
		if (ch == 'x') {
			xcount++;
			res = val;
			val = 0;
			continue;
		}
		if (ch >= '0' && ch <= '9') {
			val = 10*val + (ch-'0');
			continue;
		}
		return 0;
	}

	if (xcount ~= 1)
		return 0;
	if (res == 0 || val == 0)
		return 0;
	return ((res * $10000) | val);
];

[ TryPosition wordnum   ix addr len ch xcount val res;
	addr = WordAddress(wordnum);
	len = WordLength(wordnum);

	res = 0;
	xcount = 0;
	val = 0;
	for (ix=0 : ix<len : ix++) {
		ch = addr->ix;
		if (ch == ',') {
			xcount++;
			res = val;
			val = 0;
			continue;
		}
		if (ch >= '0' && ch <= '9') {
			val = 10*val + (ch-'0');
			continue;
		}
		return 0;
	}

	if (xcount ~= 1)
		return 0;
	return ((res * $10000) | val);
];

[ ColorSpec   wd res ix;
	parsed_number = 0;

	wd = NextWordStopped();
	for (ix=0 : colornames-->ix : ix=ix+2) {
		if (wd == colornames-->ix) {
			parsed_number = colornames-->(ix+1);
			return GPR_NUMBER;
		}
	}

	res = TryColor(wn-1);
	if (res >= 0 && res <= $FFFFFF) {
		parsed_number = res;
		return GPR_NUMBER;
	}
	
	return GPR_FAIL;
];

[ RectColorSpec startwn wd res ix;
	parsed_number = 0;
	parsed_dimensions = 0;
	parsed_position = 0;

	startwn = wn;

	while (1) {
		wd = NextWordStopped();
		if (wd == comma_word or THEN1__WD or -1) {
			if (wn-1 == startwn) {
				parsed_number = -1;
				return GPR_NUMBER;
			}
			return GPR_NUMBER;
		}
		
		for (ix=0 : colornames-->ix : ix=ix+2) {
			if (wd == colornames-->ix) {
				parsed_number = colornames-->(ix+1);
				ix = -1;
				break;
			}
		}
		if (ix == -1)
			continue;
		res = TryColor(wn-1);
		if (res >= 0 && res <= $FFFFFF) {
			parsed_number = res;
			continue;
		}

		res = TryDimensions(wn-1);
		if (res) {
			parsed_dimensions = res;
			continue;
		}

		res = TryPosition(wn-1);
		if (res) {
			parsed_position = res;
			continue;
		}

		if (1)
			return GPR_FAIL;
	}
];
	
[ RectSpec startwn wd res;
	parsed_number = 0;
	parsed_dimensions = 0;
	parsed_position = 0;

	startwn = wn;

	while (1) {
		wd = NextWordStopped();
		if (wd == comma_word or THEN1__WD or -1) {
			if (wn-1 == startwn) {
				parsed_number = -1;
				return GPR_NUMBER;
			}
			return GPR_NUMBER;
		}
		
		res = TryDimensions(wn-1);
		if (res) {
			parsed_dimensions = res;
			continue;
		}

		res = TryPosition(wn-1);
		if (res) {
			parsed_position = res;
			continue;
		}

		if (1)
			return GPR_FAIL;
	}
];
	
[ ImageSpec startwn wd res;
	parsed_number = 0;
	parsed_dimensions = 0;
	parsed_position = 0;

	startwn = wn;

	while (1) {
		wd = NextWordStopped();
		if (wd == comma_word or THEN1__WD or -1) {
			if (wn-1 == startwn) {
				parsed_number = -1;
				return GPR_NUMBER;
			}
			return GPR_NUMBER;
		}
		
		res = TryNumber(wn-1);
		if (res >= 0) {
			parsed_number = res;
			continue;
		}

		res = TryDimensions(wn-1);
		if (res) {
			parsed_dimensions = res;
			continue;
		}

		res = TryPosition(wn-1);
		if (res) {
			parsed_position = res;
			continue;
		}

		if (1)
			return GPR_FAIL;
	}
];
	
Verb 'color' 'setcolor'
	* ColorSpec -> SetColor;

Verb 'size'
	* number -> Size;

Verb 'image'
	* ImageSpec -> Image;

Extend 'fill' replace
	* RectColorSpec -> GFill;

Verb 'erase'
	* RectSpec -> GErase;

Extend 'clear' replace
	* -> Clear;

Extend 'close' replace
	* -> CloseWin;

Extend 'show' replace
	* -> ShowWin;

Verb 'split'
	* number -> SplitFixed
	* number 'fix'/'fixed' -> SplitFixed
	* number 'prop'/'percent' -> SplitProp
	* 'fix'/'fixed' number -> SplitFixed
	* 'prop'/'percent' number -> SplitProp;
	
Array info_array --> 4;

[ CloseWinSub;
	if (~~gg_graphwin)
		print_ret "There is no graphics window.";

	winsplit = 0;
	SetUpGraphWin();
	print_ret "Graphics window closed.";
];

[ ShowWinSub pairwin;
	if (~~gg_graphwin)
		print_ret "There is no graphics window.";

	pairwin = glk_window_get_parent(gg_graphwin);
	glk_window_get_arrangement(pairwin, info_array, info_array+WORDSIZE, info_array+2*WORDSIZE);
	print "The current graphics window is ";
	switch (info_array-->0 & $0F) {
		0: print "left";
		1: print "right";
		2: print "above";
		3: print "below";
		default: print "???";
	}
	print ", ";
	print info_array-->1;
	print " ";
	switch (info_array-->0 & $F0) {
		$10: print "(fixed)";
		$20: print "(percent)";
		default: print "(???)";
	}

	glk_window_get_size(gg_graphwin, info_array, info_array+WORDSIZE);
	print ". Its size is ", info_array-->0, " by ", info_array-->1,
		" pixels";
	".";
];

[ SplitFixedSub pairwin;
	if (~~graphics_supported())
		print_ret "This interpreter does not support graphics.";
	if (parsed_number <= 0)
		print_ret "The split height must be positive.";

	winsplit = parsed_number;
	if (~~gg_graphwin) {
		SetUpGraphWin();
	}
	else {
		pairwin = glk_window_get_parent(gg_graphwin);
		glk_window_set_arrangement(pairwin, $12, winsplit, gg_graphwin);
	}
	print_ret "Changed window to ", winsplit, " pixels high.";
];

[ SplitPropSub pairwin;
	if (~~graphics_supported())
		print_ret "This interpreter does not support graphics.";
	if (parsed_number <= 5 || parsed_number >= 95)
		print_ret "The split height must be between 5 and 95.";

	winsplit = -parsed_number;
	if (~~gg_graphwin) {
		SetUpGraphWin();
	}
	else {
		pairwin = glk_window_get_parent(gg_graphwin);
		glk_window_set_arrangement(pairwin, $22, -winsplit, gg_graphwin);
	}
	print_ret "Changed window to ", -winsplit, " percent of the screen.";
];

[ SetColorSub;
	if (~~gg_graphwin)
		print_ret "There is no graphics window.";

	glk_window_set_background_color(gg_graphwin, parsed_number);
	print_ret "Set default window color to ", (Hex6) parsed_number, ".";
];

[ GFillSub   posx posy wid hgt;
	if (parsed_dimensions == 0)
		print_ret "You must supply rectangle dimensions (WxH).";

	if (~~gg_graphwin)
		print_ret "There is no graphics window.";

	posx = ((parsed_position / $10000) & $FFFF);
	posy = (parsed_position & $FFFF);
	wid = ((parsed_dimensions / $10000) & $FFFF);
	hgt = (parsed_dimensions & $FFFF);

	glk_window_fill_rect(gg_graphwin, parsed_number, posx, posy, wid, hgt);

	print_ret "Filled rectangle with color ", (Hex6) parsed_number,
		" at ", posx, ",", posy, " ", wid, "x", hgt, ".";
];

[ GEraseSub   posx posy wid hgt;
	if (parsed_dimensions == 0)
		print_ret "You must supply rectangle dimensions (WxH).";

	if (~~gg_graphwin)
		print_ret "There is no graphics window.";

	posx = ((parsed_position / $10000) & $FFFF);
	posy = (parsed_position & $FFFF);
	wid = ((parsed_dimensions / $10000) & $FFFF);
	hgt = (parsed_dimensions & $FFFF);

	glk_window_erase_rect(gg_graphwin, posx, posy, wid, hgt);

	print_ret "Erased rectangle at ", posx, ",", posy, " ", wid, "x", hgt, ".";
];

[ SizeSub res;
	if (~~graphics_supported())
		print_ret "This interpreter does not support graphics.";
		
	res = glk_image_get_info(parsed_number, info_array, info_array+WORDSIZE);
	if (~~res)
		print_ret "There is no image ", parsed_number, ".";
	
	print_ret "Image ", parsed_number, " size: ",
		info_array-->0, " by ", info_array-->1, ".";
];

[ ImageSub wid hgt xpos ypos;
	if (~~gg_graphwin)
		print_ret "There is no graphics window.";
	if (~~graphicswin_supported())
		print_ret "The graphics window does not support image display.";

	if (parsed_number < 0) {
		parsed_number = 0;
	}

	xpos = ((parsed_position / $10000) & $FFFF);
	ypos = (parsed_position & $FFFF);
	if (parsed_dimensions == 0) {
		glk_image_draw(gg_graphwin, parsed_number, xpos, ypos);
	}
	else {
		wid = ((parsed_dimensions / $10000) & $FFFF);
		hgt = (parsed_dimensions & $FFFF);
		glk_image_draw_scaled(gg_graphwin, parsed_number, xpos, ypos, wid, hgt);
	}
];

[ ClearSub;
	if (~~gg_graphwin)
		print_ret "There is no graphics window.";
	glk_window_clear(gg_graphwin);
	print_ret "You erase the window.";
];

[ Hex6 val   byte ix;
	print "$";
	for (ix=0 : ix<8 : ix++) {
		@ushiftr val 28 byte;
		@shiftl val 4 val;
		byte = byte & $0F;
		if (byte == 0 && ix < 2)
			continue;
		if (byte <= 9)
			print (char) (byte+'0');
		else
			print (char) (byte-10+'A');
	}
];

[ graphics_supported;
	return glk_gestalt(6, 0); ! gestalt_Graphics
];

[ graphicswin_supported;
	if (~~glk_gestalt(6, 0)) ! gestalt_Graphics
		return false;
	if (~~glk_gestalt(7, 5)) ! gestalt_DrawImage, wintype_Graphics
		return false;
	rtrue;
];

[ glk_gestalt _vararg_count ret;
  ! glk_gestalt(uint, uint) => uint
  @glk 4 _vararg_count ret;
  return ret;
];

[ glk_request_line_event _vararg_count;
  ! glk_request_line_event(window, nativechararray, arraylen, uint)
  @glk 208 _vararg_count 0;
  return 0;
];

[ glk_cancel_line_event _vararg_count;
  ! glk_cancel_line_event(window, &{uint, window, uint, uint})
  @glk 209 _vararg_count 0;
  return 0;
];

[ glk_window_open _vararg_count ret;
  ! glk_window_open(window, uint, uint, uint, uint) => window
  @glk 35 _vararg_count ret;
  return ret;
];

[ glk_window_close _vararg_count;
  ! glk_window_close(window, &{uint, uint})
  @glk 36 _vararg_count 0;
  return 0;
];

[ glk_window_get_parent _vararg_count ret;
  ! glk_window_get_parent(window) => window
  @glk 41 _vararg_count ret;
  return ret;
];

[ glk_window_get_size _vararg_count;
  ! glk_window_get_size(window, &uint, &uint)
  @glk 37 _vararg_count 0;
  return 0;
];

[ glk_window_set_arrangement _vararg_count;
  ! glk_window_set_arrangement(window, uint, uint, window)
  @glk 38 _vararg_count 0;
  return 0;
];

[ glk_window_get_arrangement _vararg_count;
  ! glk_window_get_arrangement(window, &uint, &uint, &window)
  @glk 39 _vararg_count 0;
  return 0;
];

[ glk_window_clear _vararg_count;
  ! glk_window_clear(window)
  @glk 42 _vararg_count 0;
  return 0;
];

[ glk_image_get_info _vararg_count ret;
  ! glk_image_get_info(uint, &uint, &uint) => uint
  @glk 224 _vararg_count ret;
  return ret;
];

[ glk_image_draw _vararg_count ret;
  ! glk_image_draw(window, uint, int, int) => uint
  @glk 225 _vararg_count ret;
  return ret;
];

[ glk_image_draw_scaled _vararg_count ret;
  ! glk_image_draw_scaled(window, uint, int, int, uint, uint) => uint
  @glk 226 _vararg_count ret;
  return ret;
];

[ glk_window_erase_rect _vararg_count;
  ! glk_window_erase_rect(window, int, int, uint, uint)
  @glk 233 _vararg_count 0;
  return 0;
];

[ glk_window_fill_rect _vararg_count;
  ! glk_window_fill_rect(window, uint, int, int, uint, uint)
  @glk 234 _vararg_count 0;
  return 0;
];

[ glk_window_set_background_color _vararg_count;
  ! glk_window_set_background_color(window, uint)
  @glk 235 _vararg_count 0;
  return 0;
];

[ glk_request_mouse_event _vararg_count;
  ! glk_request_mouse_event(window)
  @glk 212 _vararg_count 0;
  return 0;
];

