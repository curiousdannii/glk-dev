# Script to run every test I've got -- at least, all the ones whose output
# can be checked by RegTest.

# To run this:
# python ~/src/plotex/regtest.py run-all-regtests
#
# (Or wherever you've installed regtest.py. Find this script at:
# http://eblong.com/zarf/plotex/regtest.html )


# You'll probably want to change this line to refer to a CheapGlk Glulxe
# binary.
** interpreter: /Users/zarf/bin/glulxec -q -u

# RegTest really wants to have a global game file, so glulxercise is it.
# This will be changed in most of the tests.
** game: glulxercise.ulx


## Glulxercise


* glulxercise
Glulxercise

> look
A voice booooms out: Welcome to the test chamber.
> all
All tests passed.
!FAIL


## Floating point


* floatconsttest
** game: floatconsttest.ulx
FloatConstTest

All tests passed.
!FAIL


* floatparsetest
** game: floatparsetest.ulx
FloatParseTest

> read chart
All tests passed.

> read tape
All tests passed.

> type 1.2345
You type the number 1.2345.

> type 0.005123
You type the number 0.00512.

> type 1.1e2
You type the number 110.0.


## Memory operations


* memcopytest
** game: memcopytest.ulx
MemCopyTest

Array: (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)

> say hello
Array: hello(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)

> copy 1 10 3
Array: hello(0)(0)(0)(0)(0)ell(0)(0)(0)(0)(0)(0)(0)

> zero 2 2
Array: he(0)(0)o(0)(0)(0)(0)(0)ell(0)(0)(0)(0)(0)(0)(0)

> say ABCEDFGHIJKL
Array: ABCEDFGHIJKL(0)(0)(0)(0)(0)(0)(0)(0)

> copy 6 4 3
Array: ABCEGHIHIJKL(0)(0)(0)(0)(0)(0)(0)(0)

> copy 0 1 5
Array: AABCEGIHIJKL(0)(0)(0)(0)(0)(0)(0)(0)


* memheaptest
** game: memheaptest.ulx
MemHeapTest

> status
Heap inactive.
>alloc 15
Allocating 15 bytes...
Allocated block at 114432.
> alloc 9
Allocating 9 bytes...
Allocated block at 114447.
> alloc 27
Allocating 27 bytes...
Allocated block at 114456.
> free 114447
Freeing block at 114447...
> status
Heap exists from 114432 to 114688.
> alloc 2
Allocating 2 bytes...
Allocated block at 114447.
> alloc 9
Allocating 9 bytes...
Allocated block at 114483.
> free 114456
Freeing block at 114456...
> alloc 11
Allocating 11 bytes...
Allocated block at 114449.
> free 114432
Freeing block at 114432...
> free 114447
Freeing block at 114447...
> free 114483
Freeing block at 114483...
> free 114449
Freeing block at 114449...
> status
Heap inactive.


## Unicode and dictionary tests


* unicodetest
** game: unicodetest.ulx
> read big sign
AEIOU with umlauts: ÄËÏÖÜ
aeiou with umlauts: äëïöü
Greek: αβγδε (abgde)
Hebrew: אבגדמ (abgdm... the aleph should be on the right)
Punctuation: ‘single curly quotes’ “double curly quotes”
Ligatures: æ (ae) œ (oe) ŋ (nj) ﬀ (ff) ﬁ (fi) ﬃ (ffi) ﬄ (ffl)
Hirigana: おすも (O SU MO)
Katakana: オスモ (O SU MO)


* unicasetest
** game: unicasetest.ulx
UniCaseTest

> all
All tests okay.
!FAIL


* unidicttest
** game: unidicttest.ulx
UniDictTest

> dict
Each entry is 48 bytes long, including 9 (4-byte) characters.
'äëïöü'
'αβγδε'
'брать' (verb) (action 251)
'אבגדמ'
'おすも'
> one two three
Divided up: one two three
Tokenized: (???) (???) (???)
> x äëïöü
Divided up: x äëïöü
Tokenized: 'x' 'äëïöü'
> брать αβγδε おすも
Divided up: брать αβγδε おすも
Tokenized: 'брать' 'αβγδε' 'おすも'
> tenletterz version x
Divided up: tenletterz version x
Tokenized: 'tenletter' 'version' 'x'


* unisourcetest
** game: unisourcetest.ulx
UniSourceTest

"Simple ASCII" (12 chars)
"AEIOU with umlauts: äëïöü ÄËÏÖÜ" (31 chars)
"Greek: αβγδε (abgde)" (20 chars)
"Hebrew: אבגדמ (abgdm)" (21 chars)
"Punctuation: ‘single curly quotes’ “double curly quotes”" (56 chars)
"Ligatures: æ (ae) œ (oe) ŋ (nj) ﬀ (ff) ﬁ (fi) ﬃ (ffi) ﬄ (ffl)" (61 chars)
"Hirigana: おすも (O SU MO)" (23 chars)
"Katakana: オスモ (O SU MO)" (23 chars)
"CJK ideographs: 丂倀惿矢腄饧" (22 chars)

Dict literals:

'ascii'
'hwæt'

All tests passed.


* dictflagtest
** game: dictflagtest.ulx
DictFlagTest

Passed.
!FAIL


* memstreamtest
** game: memstreamtest.ulx
MemStreamTest

>stream grape
Sent to char stream: 14 chars
It's a grape.

Character by character:  I t ' s   a   g r a p e . (newline)

>stream umlauts
Sent to char stream: 34 chars
Capital AEIOU with umlauts: ÄËÏÖÜ

Character by character:  C a p i t a l   A E I O U   w i t h   u m l a u t s :   (196) (203) (207) (214) (220) (newline)

>stream pie
Sent to char stream: 40 chars
It's a Greek ?, made with feta and ink.

Character by character:  I t ' s   a   G r e e k   ? ,   m a d e   w i t h   f e t a   a n d   i n k . (newline)

>stream russian
Sent to char stream: 47 chars
It's a Russian ????????. The food smells good.

Character by character:  I t ' s   a   R u s s i a n   ? ? ? ? ? ? ? ? .   T h e   f o o d   s m e l l s   g o o d . (newline)

>stream quotes
Sent to char stream: 73 chars
Some text with curly quotes: ?single curly quotes? ?double curly quotes?

Character by character:  S o m e   t e x t   w i t h   c u r l y   q u o t e s :   ? s i n g l e   c u r l y   q u o t e s ?   ? d o u b l e   c u r l y   q u o t e s ? (newline)

>stream long
Sent to char stream: 161 chars
It's a very long piece of string. So long, in fact, that its description will certainly overflow the 128-character output array.
Character by character:  I t ' s   a   v e r y   l o n g   p i e c e   o f   s t r i n g .   S o   l o n g ,   i n   f a c t ,   t h a t   i t s   d e s c r i p t i o n   w i l l   c e r t a i n l y   o v e r f l o w   t h e   1 2 8 - c h a r a c t e r   o u t p u t   a r r a y .

>streamuni grape
Sent to unicode char stream: 14 chars
It's a grape.

Character by character:  I t ' s   a   g r a p e . (newline)

>streamuni umlauts
Sent to unicode char stream: 34 chars
Capital AEIOU with umlauts: ÄËÏÖÜ

Character by character:  C a p i t a l   A E I O U   w i t h   u m l a u t s :   (196) (203) (207) (214) (220) (newline)

>streamuni pie
Sent to unicode char stream: 40 chars
It's a Greek π, made with feta and ink.

Character by character:  I t ' s   a   G r e e k   (960) ,   m a d e   w i t h   f e t a   a n d   i n k . (newline)

>streamuni russian
Sent to unicode char stream: 47 chars
It's a Russian ресторан. The food smells good.

Character by character:  I t ' s   a   R u s s i a n   (1088) (1077) (1089) (1090) (1086) (1088) (1072) (1085) .   T h e   f o o d   s m e l l s   g o o d . (newline)

>streamuni quotes
Sent to unicode char stream: 73 chars
Some text with curly quotes: ‘single curly quotes’ “double curly quotes”

Character by character:  S o m e   t e x t   w i t h   c u r l y   q u o t e s :   (8216) s i n g l e   c u r l y   q u o t e s (8217)   (8220) d o u b l e   c u r l y   q u o t e s (8221) (newline)

>streamuni long
Sent to unicode char stream: 161 chars
It's a very long piece of string. So long, in fact, that its description will certainly overflow the 128-character output array.
Character by character:  I t ' s   a   v e r y   l o n g   p i e c e   o f   s t r i n g .   S o   l o n g ,   i n   f a c t ,   t h a t   i t s   d e s c r i p t i o n   w i l l   c e r t a i n l y   o v e r f l o w   t h e   1 2 8 - c h a r a c t e r   o u t p u t   a r r a y .

>nullstream russian
Sent to char stream: 47 chars

>uninullstream russian
Sent to unicode char stream: 47 chars

>nullstream long
Sent to char stream: 161 chars

>uninullstream long
Sent to unicode char stream: 161 chars

>pos
Sent to char stream: 61 chars
This line was assembled piecewise.

Character by character:  T h i s   l i n e   w a s   a s s e m b l e d   p i e c e w i s e . (newline)

>unipos
Sent to unicode char stream: 61 chars
This line was assembled piecewise.

Character by character:  T h i s   l i n e   w a s   a s s e m b l e d   p i e c e w i s e . (newline)

>read
Read char '!'
Read line of 10 chars: Line one.
Read buffer of 13 chars: Line two.
...
Read buffer of 11 chars: Last line.

Read char -1
Read line of 0 chars
(Read from char stream: 35 chars)

>uniread
Read char '!'
Read line of 10 chars: Liηe one.
Read buffer of 13 chars: Liηe two.
...
Read buffer of 11 chars: Last liηe.

Read char -1
Read line of 0 chars
(Read from unicode char stream: 35 chars)


* resizememstreamtest
** game: resizememstreamtest.ulx
ResizeMemStreamTest

Test passed.
!FAIL


## External file and resource stream tests


* externalfile
** game: externalfile.ulx
ExternalFile

All tests passed.
!ERROR
!FAIL


* extbinaryfile
** game: extbinaryfile.ulx
ExtBinaryFile

All tests passed.
!ERROR


* resstreamtest
** game: resstreamtest.gblorb

All tests passed.
!ERROR
!failed


* startsavetest-final
** game: startsavetest.gblorb
StartSaveTest

The autorestore chunk exists. We'll restore it now.
The autorestore file has been restored successfully.

A sign on the wall reads "SlowSetUpWork has been run correctly."

You can see a table (on which is an apple) here.


* startsavetest-pre
** game: startsavetest.ulx
StartSaveTest

No autorestore resource chunk.
We now perform the slow, tedious set-up stage.

A sign on the wall reads "SlowSetUpWork has been run correctly."

You can see a table (on which is an apple) here.


## Misc Glk I/O tests


* inputeventtext
** game: inputeventtext.ulx
UnicodeTest

> get line input
> hello
Got 5 characters:
h e l l o
Hex: $68 $65 $6C $6C $6F

> get line input
> hëδおo
Got 5 characters:
h ë ? ? o
Hex: $68 $EB $3F $3F $6F 

> get unicode line input
> Hello
Got 5 characters:
H e l l o
Hex: $48 $65 $6C $6C $6F

> get unicode line input
> hëδおo
Got 5 characters:
Got 5 characters:
h ë δ お o
Hex: $68 $EB $3B4 $304A $6F


* datetimetest
** game: datetimetest.ulx
DateTimeTest

> x calendar

The first Moon landing: Sunday, Jul 20, 1969 at 8:17:40 pm (utc)
The Unix epoch: Thursday, Jan 1, 1970 at 12:00:00 midnight (utc)
Einstein's first time journey: Sunday, Oct 26, 1986 at 8:20:00 am (utc)
The birthday of Inform 7: Sunday, Apr 30, 2006 at 5:48:09 pm (utc)
The American Tricentennial: Saturday, Jul 4, 2076 at 12:00:00 noon (utc)
The longest solar eclipse of the millennium: Sunday, Jul 16, 2186 at 3:08:05 pm (utc)


## I6 compiler tests (can't really fail at runtime, but whatever)


* replacerenametest
** game: replacerenametest.ulx
ReplaceRenameTest

All passed.
!ERROR


* undefdirectivetest
** game: undefdirectivetest.ulx
UndefDirectiveTest

All passed.
!error


* ifdefinobjecttest
** game: ifdefinobjecttest.ulx
IfdefInObjectTest

All passed.
!error
!ERROR


* actionextension
** game: actionextension.ulx
ActionExtensionTest

All passed.
!error
!ERROR

* readthreeargtest
** game: readthreeargtest.z5
** interpreter: /Users/zarf/bin/fizmo-console
ReadThreeArgTest

> yes
Affirmative!

> no
Negative!

> dfg
That was an unknown word.

>
Please type something!

>   yes  
Affirmative!

>   no   
Negative!
