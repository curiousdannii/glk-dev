Constant Story "DiscardUndoTest";
Constant Headline "Not a game.^";

! Test for the @discardundo and @hasundo opcodes.
! This test assumes your interpreter can handle at least 4 levels of undo.

Release 1;

Global gg_mainwin;

Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters

Array protected --> 4;
! protected-->0 is the failure count.
! protected-->1 is a scratch variable.

[ Main loc;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;

	Banner();
	new_line;
	RunTest();
];

[ Banner  i ix;
    if (Story ~= 0) {
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 i;
    print i;
    print " / Serial number ";
    for (i=0 : i<6 : i++) print (char) ROM_GAMESERIAL->i;
    print " / Inform v"; inversion;
    print ", compiler options ";
    i = false;
    #Ifdef STRICT_MODE;
    print "S"; i++;
    #Endif; ! STRICT_MODE
    #Ifdef INFIX;
    print "X"; i++;
    #Ifnot;
    #Ifdef DEBUG;
    print "D"; i++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~i) print "(none)";
    new_line;

    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		protected-->0 = protected-->0 + 1;
		print " (ERROR, should be ", val2, ")";
	}
];

Global glob;

[ RunTest;
	@protect protected 4*WORDSIZE;
	protected-->0 = 0;

	Test1();
	Test2();
	Test3();

	new_line;
	if (protected-->0 == 0) {
		print "All tests passed.^";
	}
	else {
		print protected-->0, " tests failed!^";
	}
];

[ Test1 val;
	print "Test1:^";
	! Remember, @hasundo returns 1 for "nope, error" and 0 for "yeah we can undo".
	
	! None to begin with
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	@saveundo val;
	print "saveundo: "; check_value(val, 0); new_line;

	@hasundo val;
	print "hasundo: "; check_value(val, 0); new_line;

	@saveundo val;
	print "saveundo: "; check_value(val, 0); new_line;

	@hasundo val;
	print "hasundo: "; check_value(val, 0); new_line;

	@discardundo;

	@hasundo val;
	print "hasundo: "; check_value(val, 0); new_line;

	@discardundo;

	! None left
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	! Should fail
	@restoreundo val;
	print "restoreundo: "; check_value(val, 1); new_line;

	! Extra discardundo is okay
	@discardundo;

	! None left
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	! Should fail
	@restoreundo val;
	print "restoreundo: "; check_value(val, 1); new_line;

	new_line;
];

[ Test2 val;
	print "Test2:^";
	
	! None to begin with
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	glob = 2;
	protected-->1 = 22;

	@saveundo val;
	if (val == -1) {
		print "undone!^";
		jump Step2;
	}
	print "saveundo: "; check_value(val, 0); new_line;

	glob = 9;
	protected-->1 = 99;

	@restoreundo val;
	print "should not get here: "; check_value(false, true); new_line;

	.Step2;
	print "glob: "; check_value(glob, 2); new_line;
	print "p1: "; check_value(protected-->1, 99); new_line;
	
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	new_line;
];

[ Test3 val;
	print "Test3:^";
	
	! None to begin with
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	glob = 2;
	protected-->1 = 22;

	@saveundo val;
	if (val == -1) {
		print "undone!^";
		jump Step3;
	}
	print "saveundo: "; check_value(val, 0); new_line;

	glob = 3;
	protected-->1 = 33;

	@saveundo val;
	print "saveundo: "; check_value(val, 0); new_line;

	glob = 9;
	protected-->1 = 99;

	@discardundo;

	@restoreundo val;
	print "should not get here: "; check_value(false, true); new_line;

	.Step3;
	print "glob: "; check_value(glob, 2); new_line;
	print "p1: "; check_value(protected-->1, 99); new_line;
	
	@hasundo val;
	print "hasundo: "; check_value(val, 1); new_line;

	new_line;
];
